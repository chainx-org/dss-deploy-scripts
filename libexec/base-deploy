#!/usr/bin/env bash

#  Copyright (C) 2019-2021 Maker Ecosystem Growth Holdings, INC.

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

# shellcheck source=lib/common.sh
. "$LIB_DIR/common.sh"

# Deploy Values or Medians
tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    pipAddr=$(jq -r ".tokens.${token} | .import.pip | values" "$CONFIG_FILE")
    if [[ "$pipAddr" == "" ]]; then
        type=$(jq -r ".tokens.${token} | .pipDeploy | .type | values" "$CONFIG_FILE")
        # Deploy Medianizer as Feed
        if [[ "$type" == "median" ]]; then
            contract=$(dappCreate testchain-medians "Median${token}USD")
            eval "export VAL_${token}=${contract}"
            logAddr "VAL_${token}" "$(eval "echo ${contract}")"
            signers=$(jq -r ".tokens.${token} | .pipDeploy | .signers | .[]" "$CONFIG_FILE")
            # Approve oracle price feed providers
            allsigners=()
            for signer in $signers; do
                allsigners+=("${signer}")
            done
            sethSend "$(eval echo "\$VAL_${token}")" 'lift(address[] memory)' "[$(join "${allsigners[@]}")]"
            # Set quorum for Medianizer
            sethSend "$(eval echo "\$VAL_${token}")" 'setBar(uint256)' "$(seth --to-uint256 1)"
        fi
        # Deploy DSValue as Feed
        if [[ "${type}" == "value" ]]; then
            contract=$(dappCreate ds-value DSValue)
            eval "export VAL_${token}=${contract}"
            logAddr "VAL_${token}" "$(eval "echo ${contract}")"
        fi
    else
        eval "export VAL_${token}=${pipAddr}"
        copy osm
        copy testchain-medians
        logAddr "VAL_${token}" "$pipAddr"
    fi
    eval "export PIP_${token}=\$VAL_${token}"
done

# Deploy Collaterals
"$LIBEXEC_DIR/dss/deploy-ilks"
# shellcheck source=/dev/null
. "$OUT_DIR/load-ilks-addr-temp"
rm "$OUT_DIR/load-ilks-addr-temp"

# As all initial collaterals were deployed, we can remove authority of the deployment contract from the core contracts
#sethSend "$MCD_DEPLOY" 'releaseAuth()'
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        # Rely Pause Proxy contract to access the Adapter
        sethSend "$(eval echo "\$MCD_JOIN_${token}_${ilk}")" 'rely(address)' "$MCD_PAUSE_PROXY"
        # Deny deployer to access the Adapter
        sethSend "$(eval echo "\$MCD_JOIN_${token}_${ilk}")" 'deny(address)' "$ETH_FROM"

#        flipDeploy="$(jq ".tokens.${token}.ilks.${ilk} | .flipDeploy!=null" "$CONFIG_FILE")"
#        if [[ "$flipDeploy" == true ]]; then
#            sethSend "$MCD_DEPLOY" 'releaseAuthFlip(bytes32)' "$(seth --to-bytes32 "$(seth --from-ascii "${token}-${ilk}")")"
#        else
#            sethSend "$MCD_DEPLOY" 'releaseAuthClip(bytes32)' "$(seth --to-bytes32 "$(seth --from-ascii "${token}-${ilk}")")"
#        fi
    done
done

for token in $tokens; do
    ILKS_VARS+="\"${token}\": \"$(seth --to-checksum-address "$(eval echo "\$${token}")")\""
    if [[ "$(eval echo "\$VAL_${token}")" != "" ]]; then
    ILKS_VARS+=",
    \"VAL_${token}\": \"$(seth --to-checksum-address "$(eval echo "\$VAL_${token}")")\""
    fi
    ILKS_VARS+=",
    \"PIP_${token}\": \"$(seth --to-checksum-address "$(eval echo "\$PIP_${token}")")\""
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
    ILKS_VARS+=",
    \"MCD_JOIN_${token}_${ilk}\": \"$(eval echo "\$MCD_JOIN_${token}_${ilk}")\""

    flipDeploy="$(jq ".tokens.${token}.ilks.${ilk} | .flipDeploy!=null" "$CONFIG_FILE")"
    if [[ "$flipDeploy" == true ]]; then
    ILKS_VARS+=",
    \"MCD_FLIP_${token}_${ilk}\": \"$(seth --to-checksum-address "$(eval echo "\$MCD_FLIP_${token}_${ilk}")")\""
    else
    ILKS_VARS+=",
    \"MCD_CLIP_${token}_${ilk}\": \"$(seth --to-checksum-address "$(eval echo "\$MCD_CLIP_${token}_${ilk}")")\""
    ILKS_VARS+=",
    \"MCD_CLIP_CALC_${token}_${ilk}\": \"$(seth --to-checksum-address "$(eval echo "\$MCD_CLIP_CALC_${token}_${ilk}")")\""
    fi
    done
done

# Generate addresses.json file
# shellcheck disable=SC2153
cat > "$OUT_DIR"/addresses.json <<EOF
{
    $ILKS_VARS
}
EOF

"$LIBEXEC_DIR"/setters/set-ilks-price

"$LIBEXEC_DIR"/setters/set-ilks-pip-whitelist

# set-ilks-chop calls upchost so needs to be done after setting dust:
#"$LIBEXEC_DIR"/setters/set-ilks-chop

"$LIBEXEC_DIR"/setters/set-ilks-osm

"$LIBEXEC_DIR"/setters/set-ilks-osm-mom

"$LIBEXEC_DIR"/setters/set-pips-rights